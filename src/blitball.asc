dim map(8, 3, 8)
global map()
global tw,th
global mx,my
global blkCounter
global blkEntPtr

blkCounter = 0
blkEntPtr = 0

mx = 140
my = 50

tw = 38
th = 37

rem define actors
actorCount = 2
dim actorType(actorCount)
dim actor3Dgx(actorCount)
dim actor3Dgy(actorCount)
dim actor3Dgz(actorCount)
dim actor3Dpx(actorCount)
dim actor3Dpy(actorCount)
dim actor3Dpz(actorCount)

rem Player
actorType(0) = 0
actor3Dgx(0) = 1
actor3Dgy(0) = 0
actor3Dgz(0) = 6
actor3Dpx(0) = 0
actor3Dpy(0) = 0
actor3Dpz(0) = 0

rem Test enemy
actorType(1) = 1
actor3Dgx(1) = 4
actor3Dgy(1) = 0
actor3Dgz(1) = 4
actor3Dpx(1) = 4
actor3Dpy(1) = 0
actor3Dpz(1) = 4



procedure ldTiles
  load iff "assets/gfx/tiles.iff",0
  screen hide 0
   x = 1
   y = 1
   o = 3
   gridWidth = 7
   gridX = 0
   _tileCount = 14
  for i = 0 to _tileCount
    if (gridX > 6) 
      gridX = 0
      x = 1
      y = y + th + o
    end if
    get block i+1, x, y, tw, th, 1
    x = x + tw + o
    gridX = gridX + 1
    blkCounter = i
  next i
end proc

procedure ldEntities
    load iff "assets/gfx/ent.iff",0
    screen hide 0
    ew = 38
    eh = 37
    x = 1
    y = 1
    o = 3
    gridWidth = 7
    gridX = 0
    _entCount = 14
  for i = 0 to _entCount
    if (gridX > 6) 
      gridX = 0
      x = 1
      y = y + eh + o
    end if
    get bob i+1, x, y to x+ew, y+eh
    x = x + ew + o
    gridX = gridX + 1
  next i
end proc

procedure ldEnts
  blkEntPtr = blkCounter
  load iff "assets/gfx/ent.iff",0
  screen hide 0
  ew = 38
  eh = 37
  x = 1
  y = 1
  o = 3
  gridWidth = 7
  gridX = 0
  _entCount = 14
  for i = 0 to _entCount
    if (gridX > 6) 
      gridX = 0
      x = 1
      y = y + eh + o
    end if
    get block blkEntPtr+i, x, y, tw, th, 1
    rem get bob i+1, x, y to x+ew, y+eh
    x = x + ew + o
    gridX = gridX + 1
  next i
end proc

procedure clearMapData
    for z = 0 to 7
        for y = 0 to 2
            for x = 0 to 7
                map(x, y, z) = 0
            next x
        next y
    next z
end proc

procedure basicFloor
    for z = 0 to 7
        for x = 0 to 7
        map(x, 0, z) = 1
        next x
    next z
end proc

procedure southWall
    for y = 0 to 1
        for x = 0 to 7
            map(x, y, 7) = 2
        next x
    next y
    map(4, 0, 7) = 1
    map(4, 1, 7) = 0
end proc

procedure westWall
    for y = 0 to 1
        for z = 0 to 7
            map(7, y, z) = 2
        next z
    next y
end proc

procedure initMapData
    clearMapData
    basicFloor
    southWall
    westWall
end proc

procedure iso2x[gx,gy,gz,px,py,pz,ox]
    grid = (gx * 18) - (gz * 18)
    xx = grid + px - pz + ox
end proc[xx]

procedure iso2y[gx,gy,gz,px,py,pz,oy]
    grid = (gx * 9) - (gy * 18) + (gz * 9)
    yy = grid + (px / 2) + (pz / 2) + oy
end proc[yy]

procedure drwMap    
    for z = 0 to 7
        for y = 0 to 3
            for x = 0 to 7
                t = map(x, y, z)
                if (t > 0)
                    iso2x[x,y,z,0,0,0,mx]
                    xx = param
                    iso2y[x,y,z,0,0,0,my]
                    yy = param
                    put block t, xx, yy
                end if
            next x
        next y
    next z
end proc

procedure tile[x,y,z]
    if (x < 0 or y < 0 or z < 0 or x > 7 or y > 2 or z > 7) then t = 0 else t = map(x,y,z)
end proc[t]

procedure drwClpMap[gx,gy,gz,px,py,pz]
    ox = 0
    if (px < 0) then ox = -1
    oz = 0
    if (pz < 0) then oz = -1
    for z = oz to 4
        for y = 0 to 2
            for x = ox to 4
                tile[x + gx, y + gy, z + gz]
                t = param
                if (t > 1)
                    iso2x[x, y, z, -px, -py, -pz, 0]
                    xx = param
                    iso2y[x, y, z, -px, -py, -pz, 0]
                    yy = param
                    put block t, xx, yy
                end if
            next x
        next y
    next z
end proc

screen open 1,64,64,32,lowres
cls 0
screen hide 1

screen hide 0

initMapData

ldTiles
ldEntities
ldEnts

cls 0


drwMap

double buffer
priority on

screen show 0

procedure idle[p]
    for i = 0 to p
    next i
end proc

do

    for i = 0 to actorCount - 2

        iso2x[actor3Dgx(i), actor3Dgy(i), actor3Dgz(i), actor3Dpx(i), actor3Dpy(i), actor3Dpz(i), mx]
        xx = param
        iso2y[actor3Dgx(i), actor3Dgy(i), actor3Dgz(i), actor3Dpx(i), actor3Dpy(i), actor3Dpz(i), my]
        yy = param

        screen 1
        cls 0
        put block blkEntPtr,0,0

        drwClpMap[actor3Dgx(i), actor3Dgy(i), actor3Dgz(i), actor3Dpx(i), actor3Dpy(i), actor3Dpz(i)]

        get bob 1,0,0 to tw,th
        screen 0
        bob i,xx,yy,actorType(i)+1

    next i

    rem ** Keyboard input **
    if key state(6) = true then actor3Dpx(0) = actor3Dpx(0) - 2
    if key state(7) = true then actor3Dpx(0) = actor3Dpx(0) + 2
    if key state(8) = true then actor3Dpz(0) = actor3Dpz(0) + 2
    if key state(9) = true then actor3Dpz(0) = actor3Dpz(0) - 2

    rem **
    if (actor3Dpx(0) < -8)
        actor3Dpx(0) = 8
        actor3Dgx(0) = actor3Dgx(0) - 1
    end if
    if (actor3Dpx(0) > 8)
        actor3Dpx(0) = -8
        actor3Dgx(0) = actor3Dgx(0) + 1
    end if
    if (actor3Dpz(0) < -8)
        actor3Dpz(0) = 8
        actor3Dgz(0) = actor3Dgz(0) - 1
    end if
    if (actor3Dpz(0) > 8)
        actor3Dpz(0) = -8
        actor3Dgz(0) = actor3Dgz(0) + 1
    end if

    rem **
    if (actor3Dgx(0) = 0 and actor3Dpx(0) < 0)
        actor3Dpx(0) = 0
        actor3Dgx(0) = 0
    end if
    if (actor3Dgx(0) = 7 and actor3Dpx(0) > 0)
        actor3Dpx(0) = 0
        actor3Dgx(0) = 7
    end if
    if (actor3Dgz(0) = 0 and actor3Dpz(0) < 0)
        actor3Dpz(0) = 0
        actor3Dgz(0) = 0
    end if
    if (actor3Dgz(0) = 7 and actor3Dpz(0) > 0)
        actor3Dpz(0) = 7
        actor3Dpz(0) = 0
    end if
    

    rem locate 0,0
    rem print actor3Dgx(0)
    rem print actor3Dpx(0)

    rem idle[100000]
    wait vbl

loop